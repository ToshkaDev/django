# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.shortcuts import render, get_object_or_404
from django.http import HttpResponseRedirect, HttpResponse
from django.urls import reverse
from django.views import generic
# from django.template import loader
# from django.http import Http404
from django.utils import timezone

from .models import Question, Choice


class IndexView(generic.ListView):
    # the ListView generic view uses a default template 
    # called <app name>/<model name>_list.html; 
    # we use template_name to tell ListView to use 
    # our existing "polls/index.html" template
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'

    def get_queryset(self):
        """
        Return the last five published questions (not including those set to be
        published in the future).
        """
        return Question.objects.filter(pub_date__lte=timezone.now()).order_by('-pub_date')[:5]


class DetailView(generic.DetailView):
    model = Question
    # The template_name attribute is used to tell Django to use a specific template name 
    # instead of the autogenerated default template name (similar to ListView), 
    # which is <app name>/<model name>_detail.htm, ex "polls/question_detail.html"
    template_name = 'polls/detail.html'

    def get_queryset(self):
        """
        Excludes any questions that aren't published yet.
        """
        return Question.objects.filter(pub_date__lte=timezone.now())

# The DetailView generic view expects the primary key value captured 
# from the URL to be called "pk", so we’ve changed question_id to pk 
# for the generic views in urls.py

class ResultsView(generic.DetailView):
    model = Question
    # We also specify the template_name for the results list view – this ensures 
    # that the results view and the detail view have a different appearance
    # when rendered, even though they’re both a DetailView behind the scenes.
    template_name = 'polls/results.html'

def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, 'polls/detail.html', {
            'question': question,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        #/polls/<question.id>/results
        return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))


# !!!Regarding the previouse:
# In previous parts of the tutorial, the templates have been provided with a context 
# that contains the question and latest_question_list context variables. 
# For DetailView the question variable is provided automatically – since we’re using
# a Django model (Question), Django is able to determine an appropriate name 
# for the context variable. 
# Otherwise we are specifying it with context_object_name attribute
# !!!

# def index(request):
#     latest_question_list = Question.objects.order_by('-pub_date')[:5]
#     context = {'latest_question_list': latest_question_list}
#     return render(request, 'polls/index.html', context)

#     # latest_question_list = Question.objects.order_by('-pub_date')[:5]
#     # template = loader.get_template('polls/index.html')
#     # context = {
#     #     'latest_question_list': latest_question_list,
#     # }
#     # return HttpResponse(template.render(context, request))
#     #
#     #return HttpResponse("Hello, world. You're at the polls index.")

# def detail(request, question_id):
#     question = get_object_or_404(Question, pk=question_id)
#     #there is also get_list_or_404() method
#     return render(request, 'polls/detail.html', {'question': question})
#     # try:
#     #     question = Question.objects.get(pk=question_id)
#     # except Question.DoesNotExist:
#     #     raise Http404("Question does not exist")
#     # return render(request, 'polls/detail.html', {'question': question})
#     #
#     #return HttpResponse("You're looking at question %s." % question_id)

# def results(request, question_id):
#     question = get_object_or_404(Question, pk=question_id)
#     return render(request, 'polls/results.html', {'question': question})
#     # response = "You're looking at the results of question %s."
#     # return HttpResponse(response % question_id)

# def vote(request, question_id):
#     question = get_object_or_404(Question, pk=question_id)
#     try:
#         selected_choice = question.choice_set.get(pk=request.POST['choice'])
#     except (KeyError, Choice.DoesNotExist):
#         # Redisplay the question voting form.
#         return render(request, 'polls/detail.html', {
#             'question': question,
#             'error_message': "You didn't select a choice.",
#         })
#     else:
#         selected_choice.votes += 1
#         selected_choice.save()
#         # Always return an HttpResponseRedirect after successfully dealing
#         # with POST data. This prevents data from being posted twice if a
#         # user hits the Back button.
#         return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))
#     #return HttpResponse("You're voting on question %s." % question_id)